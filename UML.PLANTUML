@startuml
class Pile {
  -items : Item *
  -nb: size-t
  -nbMax; size-t
  -nbAffiche: size-t
  -message : string 
  +void AgrandissementCapacite ()
  +Pile() 
  +void Affiche () const
  +void push ()
  +void pop ()
  +bool estVide () const
  +size-t estvide () const
  +Expression& top () const 
  +void SetMessage (const )
  +string getMessage () const 
  +void setnbitemstoaffiche ()
  ~Pile ()
}

class Controleur {
  +ExpressionManager& expmng
  +Pile& expAff ()
  +Controleur ()
  +void Commande (const )
  +void executer ();
}

note 
un objet T et chargé de lire ce qu'on écrit dans le "input" via l'entrée Qt. Lorsque l'entrée change, T doit avertir l'objet chargé de l'affichage de cette modification 
sur l'écran. Il doit aussi avertir les objets liés à cet input : pile, calcul etc.
end note 

Controleur-->Pile 



class Item{
  -exp: Expression*
  +Item()
  +void SetExpression ()
  +Expression& getExpression () 
  +const Expression& getExpression const ()
  +raz()
}

Item o-- Litterale

class ComputerException {
  +info: string
  +ComputerException
  +string getInfo() const
}

class LitteraleManager{
-litt: Litterale**
}


class Litterale{
  
}

class Lprogramme{}
class Lnumerique{}
note top 
Lnumerique -> entière, réelle, rationnelle
end note

class Lexpression{}
class Latome {}


LitteraleManager "1" *-- "0..*" Litterale
Pile "1" *-- "0..*" Item
Litterale <|--  Lprogramme
Litterale <|--  Lnumerique
Litterale <|--  Lexpression
Litterale <|-- Latome 


@enduml
