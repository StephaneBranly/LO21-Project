@startuml
class Pile {
  -items : Item *
  -nb: size-t
  -nbMax; size-t
  -nbAffiche: size-t
  -message : string 
  +void AgrandissementCapacite ()
  +Pile() 
  +void Affiche () const
  +void push ()
  +void pop ()
  +bool estVide () const
  +size-t estvide () const
  +Expression& top () const 
  +void SetMessage (const )
  +string getMessage () const 
  +void setnbitemstoaffiche ()
  ~Pile ()
}
note top 
singleton , choisir le mode d'implémentation
end note

class Controleur {
  +ExpressionManager& expmng
  +Pile& expAff ()
  +Controleur ()
  +void Commande (const )
  +void executer ();
}



Controleur-->Pile

class Item{
  -exp: Expression*
  +Item()
  +void SetExpression ()
  +Expression& getExpression () 
  +const Expression& getExpression const ()
  +raz()
}

Item o-- Litterale

class ComputerException {
  +info: string
  +ComputerException
  +string getInfo() const
}

class LitteraleManager{
-litt: Litterale**
}
note top 
singleton
end note

class Litterale{
}

class Lprogramme{}
class Lnumerique{}
note top 
Lnumerique -> entière, réelle, rationnelle
end note

class Lexpression{}
class Latome {}

class varprog {}
note : stocker un programme utilisateur ou une variable utilisateur 

LitteraleManager "1" *-- "0..*" Litterale
Pile "1" *-- "0..*" Item
Litterale <|--  Lprogramme
Litterale <|--  Lnumerique
Litterale <|--  Lexpression
Litterale <|-- Latome 




@enduml
