@startuml
class Pile {
  -exps : Expression *
  -nb: size-t
  -nbMax; size-t
  -nbAffiche: size-t
  -message : string 
  +void AgrandissementCapacite ()
  +Pile() 
  +void Affiche () const
  +void push ()
  +void pop ()
  +bool estVide () const
  +size-t estvide () const
  +Expression& top () const 
  +void SetMessage (const )
  +string getMessage () const 
  +void setnbitemstoaffiche ()
  ~Pile ()
}
note top 
singleton , choisir le mode d'implémentation
end note



class Interface {
}

class Observer {
  
}
note top 
fait le lien entre engine et interface
end note
Observer -- Pile : < communique avec
Observer -- VariableManager : < communique avec
Observer -- ProgrammeManager : < communique avec
Observer -- Interface : < communique avec






class Operande{
}
note top 
encapsule les littérales et les operateurs 
end note 
Operande <|-- Litterale
Operande <|-- Operateur
Operande <|-- UserVar
Operande <|-- UserProg





class OperateurManager {
Operateur** tab 
}
class Operateur {
}
class OperateurBinaire {
}
class OperateurUnaire {
}
class OperateurNaire {
}
Operateur <|-- OperateurBinaire 
Operateur <|-- OperateurUnaire 
Operateur <|-- OperateurNaire
OperateurManager *-- Operateur



class ComputerException {
  +info: string
  +ComputerException
  +string getInfo() const
}



class LitteraleManager{
-litt: Litterale**
}
note top 
singleton
end note

class Litterale{
}

class Lprogramme{}
class Lnumerique{}

class Lentiere {
int value
}

class Lreelle{
float value
}
class Lrationnelle{
int numerateur; 
int denominateur; 
}
class Lexpression{}
class Latome {}





class UserVar{
Latome* id; 
}
class UserProg{
Latome* id; 
}
class VariableManager { 
UserVar** tab
}
class ProgrammeManager { 
UserProg** tab
} 
VariableManager "1" *-- "*"UserVar
ProgrammeManager "1" *-- "*"UserProg






LitteraleManager "1" *-- "0..*" Litterale
Pile "1" *-- "0..*" Operande
Litterale <|--  Lprogramme
Litterale <|--  Lnumerique
Litterale <|--  Lexpression
Litterale <|-- Latome
Lnumerique <|--  Lentiere
Lnumerique <|--  Lreelle
Lnumerique <|--  Lrationnelle
@enduml
